{"version":3,"sources":["components/Projecteaturveg.js","components/Projectfilmotography.js","components/Projectspotifyrecentlyadded.js","components/ProjectsController.js","App.js","serviceWorker.js","index.js"],"names":["Projecteaturveg","href","Projectfilmotography","Projectspotifyrecentlyadded","ProjectsController","components","eaturveg","spotifyrecentlyadded","filmotography","ProjectName","this","props","projectName","replace","Component","App","state","projectList","selectedProject","handleClick","bind","getProject","e","target","innerText","toLowerCase","setState","className","map","project","key","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAUeA,G,MARS,WACpB,OACI,6BACI,uBAAGC,KAAK,4DAAR,mBCKGC,EARc,WACzB,OACI,6BACI,uBAAGD,KAAK,uCAAR,kBCKGE,EARqB,WAChC,OACI,6BACI,uBAAGF,KAAK,wDAAR,kBCeGG,E,4MAdXC,WAAa,CACTC,SAAUN,EACVO,qBAAsBJ,EACtBK,cAAeN,G,uDAIf,IAAMO,EAAcC,KAAKL,WAAWK,KAAKC,MAAMC,YAAYC,QAAQ,MAAO,KAC1E,OACI,6BAAK,4BAAKH,KAAKC,MAAMC,aAAiB,kBAACH,EAAD,W,GAVjBK,aCsDlBC,E,kDAtDX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTC,YAAa,CAAC,yBAA0B,gBAAiB,YACzDC,gBAAiB,MAErB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAPH,E,wDAUPE,GACR,IAAMV,EAAeU,EAAKA,EAAEC,OAAOC,UAAUC,cAAgB,KAC7Df,KAAKgB,SAAS,CAACR,gBAAiBN,M,mCAIhC,OAAIF,KAAKM,MAAME,gBACX,kBAAC,EAAD,CAAoBN,YAAaF,KAAKM,MAAME,kBAE5C,uBAAGS,UAAU,QAAb,mCACoC,6BAChC,+D,+BAKF,IAAD,OACL,OACI,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,cACX,4BACI,yCACCjB,KAAKM,MAAMC,YAAYW,KAAI,SAACC,GACzB,OACI,wBAAIC,IAAKD,GACL,4BAAQF,UAAU,iBACVI,QAAS,EAAKZ,aAAcU,SAMxD,yBAAKF,UAAU,WACX,yBAAKA,UAAU,WACVjB,KAAKW,qB,GA9ChBW,IAAMlB,WCQJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.96b1455e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Projecteaturveg = () => {\n    return (\n        <div>\n            <a href=\"https://iguannalin.github.io/eaturveg/Projecteaturveg.js\">View Project</a>\n        </div>\n    );\n};\n\nexport default Projecteaturveg;\n","import React from \"react\";\n\nconst Projectfilmotography = () => {\n    return (\n        <div>\n            <a href=\"https://annaylin.com/filmotography/\">View Project</a>\n        </div>\n    );\n};\n\nexport default Projectfilmotography;\n","import React from \"react\";\n\nconst Projectspotifyrecentlyadded = () => {\n    return (\n        <div>\n            <a href=\"https://iguannalin.github.io/spotify-recently-added/\">View Project</a>\n        </div>\n    );\n};\n\nexport default Projectspotifyrecentlyadded;\n","import React, {Component} from \"react\";\nimport Projecteaturveg from './Projecteaturveg';\nimport Projectfilmotography from './Projectfilmotography';\nimport Projectspotifyrecentlyadded from './Projectspotifyrecentlyadded';\n\nclass ProjectsController extends Component {\n    components = {\n        eaturveg: Projecteaturveg,\n        spotifyrecentlyadded: Projectspotifyrecentlyadded,\n        filmotography: Projectfilmotography\n    };\n\n    render() {\n        const ProjectName = this.components[this.props.projectName.replace(/ /gi, '')];\n        return (\n            <div><h1>{this.props.projectName}</h1><ProjectName/></div>\n        );\n    }\n}\n\nexport default ProjectsController;\n","import React from 'react';\nimport './App.css';\nimport ProjectsController from \"./components/ProjectsController\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            projectList: ['Spotify Recently Added', 'Filmotography', 'eaturveg'],\n            selectedProject: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.getProject = this.getProject.bind(this);\n    }\n\n    handleClick(e) {\n        const projectName = (e) ? e.target.innerText.toLowerCase() : null;\n        this.setState({selectedProject: projectName});\n    }\n\n    getProject() {\n        if (this.state.selectedProject) return (\n            <ProjectsController projectName={this.state.selectedProject}/>\n        ); else return (\n            <p className=\"home\">\n                Hi, welcome to my projects blog.<br/>\n                <small>Select one from the left.</small>\n            </p>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App-container\">\n                    <div className=\"navigation\">\n                        <ul>\n                            <h1>Projects:</h1>\n                            {this.state.projectList.map((project) => {\n                                return (\n                                    <li key={project}>\n                                        <button className=\"project-button\"\n                                                onClick={this.handleClick}>{project}</button>\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                    <div className=\"content\">\n                        <div className=\"Project\">\n                            {this.getProject()}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}