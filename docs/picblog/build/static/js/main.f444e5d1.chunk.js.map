{"version":3,"sources":["photos/Dawn-Yosemite.jpg","photos/Daybreak-HalfDome.jpg","photos/Daytime-Beach.jpg","photos/Evening-Rock.jpg","photos/Evening-Beach.jpg","photos/Sunset-Waves.jpg","photos/Dusk-ElCapitan.jpg","shared/ViewTwoColumn.js","shared/ScrollContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ViewTwoColumn","ScrollContainer","className","src","Dawn","alt","Daybreak","Daytime","EveningRock","EveningBeach","SunsetWaves","Dusk","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,kKCa5BC,I,iHC4BAC,MA7Bf,WACI,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,iBACX,yBAAKC,IAAKC,IAAMC,IAAI,kEAExB,yBAAKH,UAAU,kBACX,yBAAKC,IAAKG,IAAUD,IAAI,iEAE5B,yBAAKH,UAAU,iBACX,yBAAKC,IAAKI,IAASF,IAAI,+EAE3B,yBAAKH,UAAU,kBAEP,yBAAKC,IAAKK,IAAaH,IAAI,yCAC3B,yBAAKF,IAAKM,IAAcJ,IAAI,sDAGpC,yBAAKH,UAAU,iBACX,yBAAKC,IAAKO,IAAaL,IAAI,gDAE/B,yBAAKH,UAAU,iBACX,yBAAKC,IAAKQ,IAAMN,IAAI,4CClBrBO,MAZf,WACI,OACI,yBAAKV,UAAU,OACX,4BAAQA,UAAU,cACd,gEACA,iDAEJ,kBAAC,EAAD,QCCNW,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,IAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,IAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.f444e5d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Dawn-Yosemite.a33316f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Daybreak-HalfDome.bfc010ca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Daytime-Beach.e53a2b7c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Evening-Rock.112e2e32.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Evening-Beach.d1a72866.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Sunset-Waves.ba83be67.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Dusk-ElCapitan.fc117ed8.jpg\";","import React from 'react';\nimport '../App.css';\n\nfunction ViewTwoColumn(props) {\n    return (\n        <div className=\"View-Two-Column\">\n            { props.photos.map((photo) => {\n                return <p>{photo}</p>\n            }) }\n        </div>\n    );\n}\n\nexport default ViewTwoColumn;\n","import React from 'react';\nimport '../App.css';\nimport './ScrollContainer.scss';\nimport ViewTwoColumn from './ViewTwoColumn';\nimport Dawn from '../photos/Dawn-Yosemite.jpg';\nimport Daybreak from '../photos/Daybreak-HalfDome.jpg';\nimport Daytime from '../photos/Daytime-Beach.jpg';\nimport EveningRock from '../photos/Evening-Rock.jpg';\nimport EveningBeach from '../photos/Evening-Beach.jpg';\nimport SunsetWaves from '../photos/Sunset-Waves.jpg';\nimport Dusk from '../photos/Dusk-ElCapitan.jpg';\n\nfunction ScrollContainer() {\n    return (\n        <div className=\"Scroll-Container\">\n            <div className=\"section first\">\n                <img src={Dawn} alt=\"Dawn at Yosemite, the sunlight streaming through the valley.\"/>\n            </div>\n            <div className=\"section second\">\n                <img src={Daybreak} alt=\"Daybreak at Half-Dome, the warm sun rising behind the peak.\"/>\n            </div>\n            <div className=\"section third\">\n                <img src={Daytime} alt=\"Daytime at the beach, somewhere on the north-western coast of California.\"/>\n            </div>\n            <div className=\"section fourth\">\n                {/*<div className=\"two-columns\">*/}\n                    <img src={EveningRock} alt=\"Evening shot of a rock in the ocean.\"/>\n                    <img src={EveningBeach} alt=\"Evening shot of the waves receding on the beach.\"/>\n                {/*</div>*/}\n            </div>\n            <div className=\"section fifth\">\n                <img src={SunsetWaves} alt=\"The waves crashing onto a beach at sunset.\"/>\n            </div>\n            <div className=\"section sixth\">\n                <img src={Dusk} alt=\"El Capitan in all its glory at dusk.\"/>\n\n            </div>\n        </div>\n    );\n}\n\nexport default ScrollContainer;\n","import React from 'react';\nimport './App.css';\nimport ScrollContainer from './shared/ScrollContainer';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>A window into the outside world,</h1>\n                <h2>from Anna's eyes</h2>\n            </header>\n            <ScrollContainer></ScrollContainer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}